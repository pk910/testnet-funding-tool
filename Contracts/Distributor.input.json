{
  "language": "Solidity",
  "sources": {
    "Contracts/Distributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ncontract Distributor {\r\n\r\n  function bytesToAddress(bytes memory b) internal pure returns(address addr) {\r\n    assembly {\r\n      addr := mload(add(b, 20))\r\n    }\r\n  }\r\n\r\n  function distribute(bytes calldata addrs, uint256[] calldata values) public payable {\r\n    uint32 addrsLen = uint32(addrs.length);\r\n    uint32 pos = 0;\r\n    uint32 idx = 0;\r\n    while (pos < addrsLen) {\r\n      payable(bytesToAddress(addrs[pos:pos+20])).call{\r\n        value: values[idx]\r\n      }(\"\");\r\n      unchecked { pos += 20; idx++; }\r\n    }\r\n  }\r\n\r\n  function distributeGwei(bytes calldata addrs, uint64[] calldata values) public payable {\r\n    uint32 addrsLen = uint32(addrs.length);\r\n    uint32 pos = 0;\r\n    uint32 idx = 0;\r\n    while (pos < addrsLen) {\r\n      payable(bytesToAddress(addrs[pos:pos+20])).call{\r\n        value: uint256(values[idx]) * 1 gwei\r\n      }(\"\");\r\n      unchecked { pos += 20; idx++; }\r\n    }\r\n  }\r\n\r\n  function distributeEther(bytes calldata addrs, uint32[] calldata values) public payable {\r\n    uint32 addrsLen = uint32(addrs.length);\r\n    uint32 pos = 0;\r\n    uint32 idx = 0;\r\n    while (pos < addrsLen) {\r\n      payable(bytesToAddress(addrs[pos:pos+20])).call{\r\n        value: uint256(values[idx]) * 1 ether\r\n      }(\"\");\r\n      unchecked { pos += 20; idx++; }\r\n    }\r\n  }\r\n\r\n  function distributeEqual(bytes calldata addrs) public payable {\r\n    uint32 addrsLen = uint32(addrs.length);\r\n    uint256 amount = msg.value * 20 / addrsLen;\r\n    uint32 pos = 0;\r\n    while (pos < addrsLen) {\r\n      payable(bytesToAddress(addrs[pos:pos+20])).call{value: amount}(\"\");\r\n      unchecked { pos += 20; }\r\n    }\r\n  }\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "": [
          "ast"
        ],
        "*": [
          "abi",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.legacyAssembly",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "evm.gasEstimates",
          "evm.assembly"
        ]
      }
    }
  }
}